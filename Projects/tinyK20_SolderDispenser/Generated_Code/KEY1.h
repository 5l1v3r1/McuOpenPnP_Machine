/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : KEY1.h
**     Project     : tinyK20_SolderDispenser
**     Processor   : MK20DX128VFT5
**     Component   : Key
**     Version     : Component 01.115, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-10-19, 06:41, # CodeGen: 28
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         isIdle   - bool KEY1_isIdle(void);
**         GetKeys  - uint8_t KEY1_GetKeys(void);
**         ScanKeys - void KEY1_ScanKeys(void);
**
** * Copyright (c) 2014-2018, Erich Styger
**  * Web:         https://mcuoneclipse.com
**  * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**  * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**  * All rights reserved.
**  *
**  * Redistribution and use in source and binary forms, with or without modification,
**  * are permitted provided that the following conditions are met:
**  *
**  * - Redistributions of source code must retain the above copyright notice, this list
**  *   of conditions and the following disclaimer.
**  *
**  * - Redistributions in binary form must reproduce the above copyright notice, this
**  *   list of conditions and the following disclaimer in the documentation and/or
**  *   other materials provided with the distribution.
**  *
**  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file KEY1.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup KEY1_module KEY1 module documentation
**  @{
*/         

#ifndef __KEY1_H
#define __KEY1_H

/* MODULE KEY1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "CS1.h"
#include "Inhr1.h"
#include "TRG1.h"

#include "Cpu.h"

#define KEY1_NUMBER_OF_KEYS                       1 /* 1: generate key release event, 0: no key release event */
#define KEY1_KEYS_MASK                            (0xFFu>>(8-KEY1_NUMBER_OF_KEYS)) /*<! Mask with bits set according to number of keys to handle */

#define KEY1_LONG_KEY_DETECTION                   1 /* 1: detect long key press, 0: no long key press detction */
#define KEY1_LONG_KEY_TIME_MS                     500 /* Long key detection time in ms */
#define KEY1_ON_KEY_PRESSED_EVENT                 1 /* 1: generate key pressed event, 0: no key pressed event */
#define KEY1_ON_KEY_PRESSED_EVENT_HANDLER         KEY1_OnKeyPressed
#define KEY1_ON_KEY_RELEASED_EVENT                1 /* 1: generate key release event, 0: no key release event */
#define KEY1_ON_KEY_RELEASED_EVENT_HANDLER        KEY1_OnKeyReleased
#define KEY1_ON_KEY_PRESSED_LONG_EVENT            (1 && KEY1_LONG_KEY_DETECTION) /* 1: generate key long pressed event, 0: no key pressed event */
#define KEY1_ON_KEY_PRESSED_LONG_EVENT_HANDLER    KEY1_OnKeyPressedLong
#define KEY1_ON_KEY_RELEASED_LONG_EVENT           (1 && KEY1_LONG_KEY_DETECTION) /* 1: generate key release long event, 0: no key release event */
#define KEY1_ON_KEY_RELEASED_LONG_EVENT_HANDLER   KEY1_OnKeyReleasedLong
#define KEY1_ON_KEY_HOLD_EVENT                    (0 && KEY1_LONG_KEY_DETECTION) /* 1: generate key release long event, 0: no key release event */
#define KEY1_ON_KEY_HOLD_EVENT_HANDLER            KEY1_OnKeyHold

typedef uint8_t KEY1_KeyStorage; /* we can deal with up to 8 keys */




void KEY1_Init(void);
/*
** ===================================================================
**     Method      :  KEY1_Init (component Key)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

bool KEY1_isIdle(void);
/*
** ===================================================================
**     Method      :  isIdle (component Key)
**
**     Description :
**         Determine if the deriver is idle. This is useful to check
**         before entering a low power mode.
**     Parameters  : None
**     Returns     :
**         ---             - returns true if the driver is idle.
** ===================================================================
*/

#define KEY1_GetKeys() \
  (KEY1_KeyStorage)(( \
    ((Inhr1_GetVal()!=0)?1<<0:0)       /* a one bit if key pressed */ \
  ))
/*
** ===================================================================
**     Method      :  GetKeys (component Key)
**
**     Description :
**         Returns the port value of the keys. A one in the returned
**         value indicates a key pressed.
**     Parameters  : None
**     Returns     :
**         ---             - key status
** ===================================================================
*/

void KEY1_ScanKeys(void);
/*
** ===================================================================
**     Method      :  ScanKeys (component Key)
**
**     Description :
**         Scans/Polls the keys
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END KEY1. */

#endif
/* ifndef __KEY1_H */
/*!
** @}
*/
